name: CI/CD Pipeline

on: push

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        echo "No tests defined."

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Build Docker image
      run: |
        docker build -t canonical-inteview .

    - name: Save Docker image as tar file
      run: |
        docker save canonical-inteview -o canonical-inteview.tar

    - name: Transfer Docker image to EC2
      run: |
        echo "${{ secrets.EC2_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        scp -o StrictHostKeyChecking=no -i private_key.pem canonical-inteview.tar ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/

    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << EOF
          # Ensure Docker is installed and running
          sudo yum update -y
          sudo amazon-linux-extras install docker -y
          sudo systemctl start docker
          sudo usermod -a -G docker ec2-user

          # Load Docker image from tar file
          sudo docker load -i /home/ec2-user/canonical-inteview.tar

          # Stop and remove the old container if it exists
          sudo docker stop canonical-container || true
          sudo docker rm canonical-container || true

          # Run the new container
          sudo docker run -d --name canonical-container -p 8000:8000 canonical-inteview
        EOF
